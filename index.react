import React, { useState, useEffect, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, onAuthStateChanged, signInAnonymously } from 'firebase/auth';
import { getFirestore, doc, getDoc, setDoc, updateDoc, onSnapshot, collection, query, where, addDoc, serverTimestamp } from 'firebase/firestore';
import { Search, Plus, Moon, Sun, X, CornerDownLeft, Eye, MessageCircle, GitPullRequest } from 'lucide-react';

// Tailwind CSS is assumed to be available
// For a simple deploy, you can include the script in your public/index.html file:
// <script src="https://cdn.tailwindcss.com"></script>

const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

// Mapeo para los estados de las tareas
const statusMap = {
  'to-do': 'To Do',
  'in-progress': 'En Proceso',
  'done': 'Completada',
};

// Opciones predefinidas para la fecha de entrega
const dateOptions = [
  { label: 'Hoy', value: 0 },
  { label: 'Mañana', value: 1 },
  { label: '3 Días', value: 3 },
  { label: '4 Días', value: 4 },
  { label: '5 Días', value: 5 },
];

function App() {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [projects, setProjects] = useState([]);
  const [selectedProjectId, setSelectedProjectId] = useState(null);
  const [tasks, setTasks] = useState([]);
  const [kanbanData, setKanbanData] = useState({
    'to-do': [],
    'in-progress': [],
    'done': [],
  });
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    infoAdicional: {
      terminal: '',
      operacion: '',
      consecutivo: '',
      cotizacion: '',
      monto: '',
    },
    dueDate: '',
  });
  const [selectedTask, setSelectedTask] = useState(null);
  const [isTaskDetailModalOpen, setIsTaskDetailModalOpen] = useState(false);
  const [taskHistory, setTaskHistory] = useState([]);
  const [newProjectName, setNewProjectName] = useState('');
  const [showProjectModal, setShowProjectModal] = useState(false);
  const [currentView, setCurrentView] = useState('dashboard'); // 'dashboard' or 'kanban'
  const [showCompletedTasks, setShowCompletedTasks] = useState(true);
  const [taskUpdateData, setTaskUpdateData] = useState({ comment: '' });
  const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false);
  const [taskToUpdate, setTaskToUpdate] = useState(null);
  const [historyModalOpen, setHistoryModalOpen] = useState(false);
  const [selectedHistoryItem, setSelectedHistoryItem] = useState(null);
  const [isConfirmTaskModalOpen, setIsConfirmTaskModalOpen] = useState(false);
  const [taskToConfirm, setTaskToConfirm] = useState(null);
  const [isProjectDropdownOpen, setIsProjectDropdownOpen] = useState(false);
  const projectDropdownRef = useRef(null);

  // Estados y funciones para el avatar
  const [userAvatar, setUserAvatar] = useState('🧑‍💻');
  const [showUserInfoModal, setShowUserInfoModal] = useState(false);
  const defaultEmojis = ['💻', '🚀', '🌟', '💡', '🤖', '👾', '🌈', '🎉'];

  const [darkMode, setDarkMode] = useState(() => {
    // Leer la preferencia de localStorage al iniciar
    const savedMode = localStorage.getItem('darkMode');
    return savedMode === 'true' ? true : false;
  });

  // --- Novedad: Lógica del Asistente de Búsqueda (Clip) ---
  const [isAssistantModalOpen, setIsAssistantModalOpen] = useState(false);
  const [assistantQuery, setAssistantQuery] = useState('');
  const [assistantResponse, setAssistantResponse] = useState('');
  const [isAssistantLoading, setIsAssistantLoading] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);
  const responseRef = useRef(null);
  
  // --- Novedad: Estado para el menú de acción flotante ---
  const [showFloatingActionMenu, setShowFloatingActionMenu] = useState(false);
  
  // --- Novedad: Estado para la animación de rebote del botón Clip ---
  const [isBouncing, setIsBouncing] = useState(true);

  // useEffect para la animación de rebote del botón Clip
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsBouncing(false);
    }, 3000); // 3 segundos
    return () => clearTimeout(timer);
  }, []);

  const toggleDarkMode = () => {
    setDarkMode(prevMode => {
      const newMode = !prevMode;
      localStorage.setItem('darkMode', newMode);
      return newMode;
    });
  };

  useEffect(() => {
    if (responseRef.current) {
      responseRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [chatHistory]);
  
  // Función para manejar la búsqueda del asistente
  const handleAssistantSearch = async (e) => {
    e.preventDefault();
    if (!assistantQuery.trim()) return;

    setIsAssistantLoading(true);
    setAssistantResponse('');
    setChatHistory(prev => [...prev, { role: 'user', text: assistantQuery }]);
    
    // Guardamos la consulta del usuario antes de enviarla
    const userPrompt = assistantQuery;
    setAssistantQuery('');

    // Preparamos el contexto para el modelo de IA
    const projectsList = projects.map(p => ({
      id: p.id,
      name: p.name,
    }));
    const tasksList = tasks.map(t => ({
      id: t.id,
      title: t.title,
      description: t.description,
      status: t.status,
      dueDate: t.dueDate,
      projectName: t.projectName,
      infoAdicional: t.infoAdicional,
    }));
    
    // Le decimos al modelo que actúe como un asistente de búsqueda.
    const prompt = `Actúa como un asistente de búsqueda para una aplicación de gestión de proyectos. El usuario te hará preguntas sobre sus proyectos y tareas. Proporciona respuestas concisas y directas basadas en la información que te daré.
    
    Tus datos disponibles son los siguientes (en formato JSON):
    
    - Proyectos: ${JSON.stringify(projectsList)}
    - Tareas: ${JSON.stringify(tasksList)}

    Pregunta del usuario: "${userPrompt}"
    `;

    const apiHistory = [{ role: "user", parts: [{ text: prompt }] }];
    const payload = { contents: apiHistory };
    const apiKey = "";
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const result = await response.json();

      if (result.candidates && result.candidates.length > 0) {
        const text = result.candidates[0].content.parts[0].text;
        setAssistantResponse(text);
        setChatHistory(prev => [...prev, { role: 'assistant', text: text }]);
      } else {
        setAssistantResponse("No pude encontrar una respuesta con la información disponible. Intenta una pregunta diferente.");
        setChatHistory(prev => [...prev, { role: 'assistant', text: "No pude encontrar una respuesta con la información disponible. Intenta una pregunta diferente." }]);
      }
    } catch (error) {
      console.error("Error al llamar a la API de Gemini:", error);
      setAssistantResponse("Ocurrió un error al procesar tu solicitud. Inténtalo de nuevo más tarde.");
      setChatHistory(prev => [...prev, { role: 'assistant', text: "Ocurrió un error al procesar tu solicitud. Inténtalo de nuevo más tarde." }]);
    } finally {
      setIsAssistantLoading(false);
    }
  };

  useEffect(() => {
    // Inicializar Firebase
    const app = initializeApp(firebaseConfig);
    const firestore = getFirestore(app);
    const authentication = getAuth(app);
    setDb(firestore);
    setAuth(authentication);

    // Iniciar sesión con token personalizado o de forma anónima
    onAuthStateChanged(authentication, async (user) => {
      if (user) {
        setUserId(user.uid);
      } else {
        try {
          if (initialAuthToken) {
            await signInWithCustomToken(authentication, initialAuthToken);
          } else {
            await signInAnonymously(authentication);
          }
        } catch (error) {
          console.error("Error de autenticación de Firebase:", error);
        }
      }
      setIsAuthReady(true);
    });
  }, []);

  useEffect(() => {
    if (db && userId) {
      const projectsRef = collection(db, 'artifacts', appId, 'users', userId, 'projects');
      const projectsUnsub = onSnapshot(projectsRef, (snapshot) => {
        const fetchedProjects = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setProjects(fetchedProjects);
        if (fetchedProjects.length > 0 && !selectedProjectId) {
          setSelectedProjectId(fetchedProjects[0].id);
        }
      }, (error) => {
        console.error("Error al obtener proyectos:", error);
      });

      const historyRef = collection(db, 'artifacts', appId, 'users', userId, 'taskHistory');
      const historyUnsub = onSnapshot(historyRef, (snapshot) => {
        const fetchedHistory = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setTaskHistory(fetchedHistory.sort((a, b) => b.timestamp.toDate() - a.timestamp.toDate()));
      }, (error) => {
        console.error("Error al obtener el historial de tareas:", error);
      });
      
      const userDocRef = doc(db, 'artifacts', appId, 'users', userId, 'userData', 'profile');
      const userUnsubscribe = onSnapshot(userDocRef, (docSnap) => {
          if (docSnap.exists() && docSnap.data().avatar) {
              setUserAvatar(docSnap.data().avatar);
          }
      });

      return () => {
        projectsUnsub();
        historyUnsub();
        userUnsubscribe();
      };
    }
  }, [db, userId, appId, selectedProjectId]);

  useEffect(() => {
    if (db && userId && selectedProjectId) {
      const tasksRef = collection(db, 'artifacts', appId, 'users', userId, 'tasks');
      const tasksQuery = query(tasksRef, where('projectId', '==', selectedProjectId));
      const tasksUnsub = onSnapshot(tasksQuery, (snapshot) => {
        const fetchedTasks = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setTasks(fetchedTasks);
        organizeTasksForKanban(fetchedTasks);
      }, (error) => {
        console.error("Error al obtener tareas:", error);
      });

      return tasksUnsub;
    }
  }, [db, userId, appId, selectedProjectId]);

  // Manejar clics fuera del dropdown
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (projectDropdownRef.current && !projectDropdownRef.current.contains(event.target)) {
        setIsProjectDropdownOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [projectDropdownRef]);


  const organizeTasksForKanban = (tasks) => {
    const newKanbanData = {
      'to-do': tasks.filter(task => task.status === 'to-do'),
      'in-progress': tasks.filter(task => task.status === 'in-progress'),
      'done': tasks.filter(task => task.status === 'done'),
    };
    setKanbanData(newKanbanData);
  };

  const handleCreateProject = async () => {
    if (!newProjectName.trim() || !db || !userId) {
      console.error("Falta el nombre del proyecto, db o userId.");
      return;
    }
    try {
      const projectsRef = collection(db, 'artifacts', appId, 'users', userId, 'projects');
      await addDoc(projectsRef, {
        name: newProjectName,
        createdAt: new Date(),
        userId: userId,
      });
      setNewProjectName('');
      setShowProjectModal(false);
    } catch (error) {
      console.error("Error al crear el proyecto:", error);
    }
  };

  const handlePreCreateTask = (e) => {
    e.preventDefault();
    if (!newTask.title.trim() || !selectedProjectId) {
      return;
    }
    // Abrir el modal de confirmación con los datos de la tarea
    setTaskToConfirm(newTask);
    setIsConfirmTaskModalOpen(true);
  };

  const handleConfirmCreateTask = async () => {
    if (!taskToConfirm || !db || !userId || !selectedProjectId) {
      return;
    }

    try {
      const projectsRef = collection(db, 'artifacts', appId, 'users', userId, 'projects');
      const projectDoc = await getDoc(doc(projectsRef, selectedProjectId));
      const projectName = projectDoc.exists() ? projectDoc.data().name : 'N/A';
      
      const tasksRef = collection(db, 'artifacts', appId, 'users', userId, 'tasks');
      const taskPayload = {
        ...taskToConfirm,
        status: 'to-do',
        projectId: selectedProjectId,
        projectName: projectName, // Añadir nombre del proyecto
        createdAt: new Date(),
        userId: userId,
        infoAdicional: {
          ...taskToConfirm.infoAdicional,
          monto: parseFloat(taskToConfirm.infoAdicional.monto.replace(/,/g, '') || 0),
        },
        history: [{
          status: 'to-do',
          timestamp: new Date(),
          change: 'Tarea creada',
          comment: '',
        }],
      };
      await addDoc(tasksRef, taskPayload);
      setNewTask({
        title: '',
        description: '',
        infoAdicional: { terminal: '', operacion: '', consecutivo: '', cotizacion: '', monto: '' },
        dueDate: '',
      });
      setIsModalOpen(false);
      setIsConfirmTaskModalOpen(false);
      setTaskToConfirm(null);
    } catch (error) {
      console.error("Error al crear la tarea:", error);
    }
  };

  const handleConfirmUpdate = async () => {
    if (taskToUpdate) {
      await handleUpdateTaskStatus(taskToUpdate.taskId, taskToUpdate.newStatus, taskUpdateData.comment);
      closeModal();
    }
  };

  const handleUpdateTaskStatus = async (taskId, newStatus, comment) => {
    if (!db || !userId) return;

    try {
      const taskDocRef = doc(db, 'artifacts', appId, 'users', userId, 'tasks', taskId);
      const taskSnapshot = await getDoc(taskDocRef);
      if (!taskSnapshot.exists()) return;
      const currentTask = taskSnapshot.data();

      const newHistoryEntry = {
        status: newStatus,
        timestamp: new Date(),
        change: `Estado cambiado de '${statusMap[currentTask.status]}' a '${statusMap[newStatus]}'`,
        comment: comment,
      };

      await updateDoc(taskDocRef, {
        status: newStatus,
        history: [...currentTask.history, newHistoryEntry],
      });

      const historyRef = collection(db, 'artifacts', appId, 'users', userId, 'taskHistory');
      await addDoc(historyRef, {
        taskId: taskId,
        taskTitle: currentTask.title,
        fromStatus: currentTask.status,
        toStatus: newStatus,
        timestamp: new Date(),
        userId: userId,
        projectName: currentTask.projectName,
      });

    } catch (error) {
      console.error("Error al actualizar el estado de la tarea:", error);
    }
  };

  const handleDragStart = (e, taskId) => {
    e.dataTransfer.setData("taskId", taskId);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDrop = (e, status) => {
    e.preventDefault();
    const taskId = e.dataTransfer.getData("taskId");
    const task = tasks.find(t => t.id === taskId);
    if (task && task.status !== status) {
      setTaskToUpdate({ taskId, newStatus: status });
      setIsUpdateModalOpen(true);
    }
  };

  const handleDateChange = (daysToAdd) => {
    const date = new Date();
    date.setDate(date.getDate() + daysToAdd);
    setNewTask(prev => ({ ...prev, dueDate: date.toISOString().split('T')[0] }));
  };

  const handleCustomDateChange = (e) => {
    setNewTask(prev => ({ ...prev, dueDate: e.target.value }));
  };

  const handleMontoChange = (e) => {
    const rawValue = e.target.value.replace(/[^0-9.]/g, ''); // Permite solo números y punto
    const formattedValue = new Intl.NumberFormat('es-MX').format(rawValue);
    setNewTask(prev => ({
      ...prev,
      infoAdicional: { ...prev.infoAdicional, monto: formattedValue }
    }));
  };

  const openTaskDetailModal = (task) => {
    setSelectedTask(task);
    setIsTaskDetailModalOpen(true);
  };

  const openHistoryAuditModal = (historyItem) => {
    const taskDetails = tasks.find(t => t.id === historyItem.taskId);
    if (taskDetails) {
      setSelectedHistoryItem({
        ...historyItem,
        fullHistory: taskDetails.history,
      });
      setHistoryModalOpen(true);
    }
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setIsTaskDetailModalOpen(false);
    setShowProjectModal(false);
    setIsUpdateModalOpen(false);
    setHistoryModalOpen(false);
    setIsConfirmTaskModalOpen(false);
    setTaskToConfirm(null);
    setShowUserInfoModal(false);
    setIsAssistantModalOpen(false);
    // --- Novedad: Cerrar el menú flotante al cerrar cualquier modal ---
    setShowFloatingActionMenu(false);
    setNewTask({
      title: '',
      description: '',
      infoAdicional: { terminal: '', operacion: '', consecutivo: '', cotizacion: '', monto: '' },
      dueDate: '',
    });
    setTaskUpdateData({ comment: '' });
  };
  
  // Funciones para el avatar
  const handleUpdateAvatar = async (newAvatar) => {
    if (!db || !userId) return;

    const userDocRef = doc(db, 'artifacts', appId, 'users', userId, 'userData', 'profile');
    try {
        await setDoc(userDocRef, { avatar: newAvatar }, { merge: true });
        setUserAvatar(newAvatar);
    } catch (error) {
        console.error('Error al actualizar el avatar:', error);
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onloadend = () => {
            handleUpdateAvatar(reader.result);
        };
        reader.readAsDataURL(file);
    }
  };

  const getDueDateClass = (dueDate) => {
    if (!dueDate) return '';
    const now = new Date();
    const due = new Date(dueDate);
    const diffTime = due - now;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays <= 1) return 'bg-red-500';
    if (diffDays <= 3) return 'bg-yellow-500';
    // Se ha cambiado de 'bg-[#0038A6]' a 'bg-sky-600' para un tono más suave
    return 'bg-sky-600'; 
  };

  const renderKanbanColumn = (status) => (
    <div
      key={status}
      className="bg-slate-50 dark:bg-slate-800 p-4 rounded-lg shadow-inner flex-1 flex flex-col gap-4 min-h-[300px]"
      onDragOver={handleDragOver}
      onDrop={(e) => handleDrop(e, status)}
    >
      <h3 className="text-lg font-semibold text-slate-800 dark:text-slate-200 border-b pb-2 border-slate-200 dark:border-slate-700">{statusMap[status]}</h3>
      {kanbanData[status]?.map(task => {
        if (!showCompletedTasks && task.status === 'done') return null;
        return (
          <div
            key={task.id}
            className="bg-white dark:bg-slate-700 p-4 rounded-md shadow-md cursor-pointer hover:bg-slate-100 dark:hover:bg-slate-600 transition-colors duration-200"
            draggable="true"
            onDragStart={(e) => handleDragStart(e, task.id)}
            onClick={() => openTaskDetailModal(task)}
          >
            <div className="flex justify-between items-center mb-2">
              <p className="font-medium text-slate-800 dark:text-slate-100">{task.title}</p>
              {task.dueDate && (
                <span className={`text-xs font-semibold text-white ${getDueDateClass(task.dueDate)} rounded-full px-2 py-1`}>
                  {new Date(task.dueDate).toLocaleDateString()}
                </span>
              )}
            </div>
            <p className="text-sm text-slate-500 dark:text-slate-400">{task.description}</p>
          </div>
        );
      })}
    </div>
  );

  const getUpcomingTasks = () => {
    const now = new Date();
    return tasks.filter(task => {
      if (task.status === 'done') return false;
      const dueDate = new Date(task.dueDate);
      const diffTime = dueDate.getTime() - now.getTime();
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      return diffDays <= 7 && diffDays >= 0;
    }).sort((a,b) => new Date(a.dueDate) - new Date(b.dueDate));
  };

  const totalTasks = tasks.length;
  const tasksToDo = tasks.filter(t => t.status === 'to-do').length;
  const tasksInProgress = tasks.filter(t => t.status === 'in-progress').length;
  const tasksDone = tasks.filter(t => t.status === 'done').length;
  const upcomingTasks = getUpcomingTasks();

  if (!isAuthReady) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-slate-50 dark:bg-slate-900">
        <div className="text-center text-slate-500 dark:text-slate-400">Cargando aplicación...</div>
      </div>
    );
  }

  const selectedProject = projects.find(p => p.id === selectedProjectId);

  const dashboardContent = (
    <div className="p-6">
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6">
        <div className="relative" ref={projectDropdownRef}>
          <button
            onClick={() => setIsProjectDropdownOpen(!isProjectDropdownOpen)}
            className="flex items-center gap-2 text-3xl font-bold text-slate-900 dark:text-white mb-4 md:mb-0 bg-white dark:bg-slate-800 p-2 rounded-lg shadow-sm hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
          >
            Dashboard: <span className="text-sky-600 dark:text-white">{selectedProject ? selectedProject.name : 'Seleccionar Proyecto'}</span>
            <svg xmlns="http://www.w3.org/2000/svg" className={`h-6 w-6 transform transition-transform ${isProjectDropdownOpen ? 'rotate-180' : 'rotate-0'} text-slate-700 dark:text-slate-300`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          {isProjectDropdownOpen && (
            <div className="absolute top-full left-0 mt-2 w-64 bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-md shadow-lg z-20">
              <div className="py-1">
                {projects.map(project => (
                  <button
                    key={project.id}
                    onClick={() => {
                      setSelectedProjectId(project.id);
                      setIsProjectDropdownOpen(false);
                    }}
                    className="block w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
                  >
                    {project.name}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-slate-700 dark:text-slate-300">Total de Tareas</h3>
          {/* Se ha cambiado de 'text-[#0038A6]' a 'text-sky-600' */}
          <p className="text-4xl font-bold text-sky-600">{totalTasks}</p>
        </div>
        <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-slate-700 dark:text-slate-300">Pendientes</h3>
          <p className="text-4xl font-bold text-slate-800 dark:text-slate-100">{tasksToDo}</p>
        </div>
        <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-slate-700 dark:text-slate-300">En Proceso</h3>
          <p className="text-4xl font-bold text-yellow-600">{tasksInProgress}</p>
        </div>
        <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-slate-700 dark:text-slate-300">Completadas</h3>
          <p className="text-4xl font-bold text-green-600">{tasksDone}</p>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-md">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-bold text-slate-800 dark:text-slate-100">Próximas Tareas</h3>
            {/* Se ha cambiado de 'bg-[#0038A6]' a 'bg-sky-600' */}
            <span className="text-sm font-medium text-white bg-sky-600 rounded-full px-3 py-1">
              {upcomingTasks.length}
            </span>
          </div>
          {upcomingTasks.length > 0 ? (
            <ul className="space-y-4">
              {upcomingTasks.map(task => (
                <li key={task.id} className="border-l-4 border-sky-600 pl-4 py-2 bg-slate-50 dark:bg-slate-700 rounded-md">
                  <p className="font-semibold text-slate-700 dark:text-slate-200">{task.title}</p>
                  <p className="text-sm text-slate-500 dark:text-slate-400">
                    Fecha de entrega: {new Date(task.dueDate).toLocaleDateString()}
                  </p>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-slate-500 dark:text-slate-400">No hay tareas próximas a vencer.</p>
          )}
        </div>
        <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-bold text-slate-800 dark:text-slate-100 mb-4">Historial Reciente</h3>
          <ul className="space-y-2">
            {taskHistory.slice(0, 6).map((historyItem, index) => (
              <li key={index} className="border-b dark:border-slate-700 pb-2 last:border-b-0">
                <p className="text-sm font-medium text-slate-800 dark:text-slate-100">{historyItem.taskTitle}</p>
                <p className="text-xs text-slate-500 dark:text-slate-400">
                  {/* Se ha cambiado de 'text-[#0038A6]' a 'text-sky-600' */}
                  <span className="font-semibold text-sky-600">{historyItem.projectName}</span>
                  : {historyItem.change}
                </p>
                <button
                  onClick={() => openHistoryAuditModal(historyItem)}
                  className="mt-1 text-xs text-sky-600 hover:text-sky-700 font-medium"
                >
                  Ver Auditoría
                </button>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );

  const kanbanContent = (
    <div className="flex flex-col lg:flex-row p-6 gap-6">
      <aside className="w-full lg:w-1/4">
        <div className="bg-white dark:bg-slate-800 p-4 rounded-lg shadow-md mb-6">
          <h2 className="text-xl font-bold mb-4 text-slate-800 dark:text-slate-100">Proyectos</h2>
          <div className="flex flex-col gap-2">
            {projects.map(project => (
              <button
                key={project.id}
                onClick={() => setSelectedProjectId(project.id)}
                // Se ha cambiado de 'bg-[#0038A6]' a 'bg-sky-600'
                className={`text-left p-3 rounded-lg transition-colors duration-200 ${selectedProjectId === project.id ? 'bg-sky-600 text-white shadow-md' : 'bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-600'}`}
              >
                {project.name}
              </button>
            ))}
          </div>
        </div>

        <div className="bg-white dark:bg-slate-800 p-4 rounded-lg shadow-md">
          <h2 className="text-xl font-bold mb-4 text-slate-800 dark:text-slate-100">Historial de Tareas</h2>
          <div className="flex flex-col gap-2 max-h-96 overflow-y-auto">
            {taskHistory.length > 0 ? (
              taskHistory.slice(0, 6).map((historyItem, index) => (
                <div key={index} className="border-b dark:border-slate-700 pb-2 last:border-b-0">
                  <p className="text-sm font-medium text-slate-800 dark:text-slate-100">{historyItem.taskTitle}</p>
                  <p className="text-xs text-slate-500 dark:text-slate-400">
                    {/* Se ha cambiado de 'text-[#0038A6]' a 'text-sky-600' */}
                    <span className="font-semibold text-sky-600">{historyItem.projectName}</span>: {historyItem.change} - {new Date(historyItem.timestamp.seconds * 1000).toLocaleString()}
                  </p>
                  <button
                    onClick={() => openHistoryAuditModal(historyItem)}
                    className="mt-1 text-xs text-sky-600 hover:text-sky-700 font-medium"
                  >
                    Ver Auditoría
                  </button>
                </div>
              ))
            ) : (
              <p className="text-slate-500 dark:text-slate-400 text-sm">No hay historial.</p>
            )}
          </div>
        </div>
      </aside>

      <main className="w-full lg:w-3/4">
        {selectedProject ? (
          <>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-3xl font-bold text-slate-900 dark:text-white">{selectedProject.name}</h2>
              <button
                onClick={() => setShowCompletedTasks(!showCompletedTasks)}
                className="bg-slate-200 dark:bg-slate-700 text-slate-800 dark:text-slate-200 font-semibold py-2 px-4 rounded-full hover:bg-slate-300 dark:hover:bg-slate-600 transition-colors"
              >
                {showCompletedTasks ? 'Ocultar Completadas' : 'Mostrar Completadas'}
              </button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {Object.keys(statusMap).map(renderKanbanColumn)}
            </div>
          </>
        ) : (
          <div className="flex items-center justify-center p-10 bg-white dark:bg-slate-800 rounded-lg shadow-md">
            <p className="text-lg text-slate-500 dark:text-slate-400">
              Selecciona un proyecto o crea uno nuevo para empezar.
            </p>
          </div>
        )}
      </main>
    </div>
  );

  return (
    <div className={`min-h-screen font-sans ${darkMode ? 'dark bg-slate-900 text-slate-100' : 'bg-slate-50 text-slate-800'}`}>
      {/* Header */}
      <header className="p-4 bg-white dark:bg-slate-800 shadow-sm flex items-center justify-between sticky top-0 z-10">
        {/* Se ha cambiado de 'text-[#0038A6]' a 'text-sky-600' */}
        <h1 className="text-2xl font-bold text-sky-600 dark:text-white">COREM-Tasks</h1>
        <nav className="flex items-center gap-4">
          <button
            onClick={() => setCurrentView('dashboard')}
            // Se ha cambiado de 'bg-[#0038A6]' a 'bg-sky-600'
            className={`px-4 py-2 rounded-full font-semibold transition-colors ${currentView === 'dashboard' ? 'bg-sky-600 text-white' : 'bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-600'}`}
          >
            Inicio
          </button>
          <button
            onClick={() => setCurrentView('kanban')}
            // Se ha cambiado de 'bg-[#0038A6]' a 'bg-sky-600'
            className={`px-4 py-2 rounded-full font-semibold transition-colors ${currentView === 'kanban' ? 'bg-sky-600 text-white' : 'bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-600'}`}
          >
            Kanban
          </button>
        </nav>
        <div className="flex items-center gap-4">
          <button
            onClick={toggleDarkMode}
            className="p-2 rounded-full bg-slate-100 dark:bg-slate-700 text-slate-800 dark:text-slate-200 hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors"
          >
            {darkMode ? (
              <Sun className="h-6 w-6" />
            ) : (
              <Moon className="h-6 w-6" />
            )}
          </button>
          <button
            onClick={() => setShowUserInfoModal(true)}
            className="w-10 h-10 rounded-full bg-slate-200 dark:bg-slate-700 flex items-center justify-center text-2xl"
          >
            {userAvatar}
          </button>
        </div>
      </header>

      {/* Main Content */}
      <div className="flex-grow p-4 md:p-6">
        {currentView === 'dashboard' ? dashboardContent : kanbanContent}
      </div>

      {/* Floating Action Button - Asistente de Búsqueda */}
      <div className="fixed bottom-6 right-6 z-50">
        <button
          onClick={() => setIsAssistantModalOpen(true)}
          className={`
            p-4 rounded-full text-white shadow-lg transition-transform duration-300
            bg-sky-600 hover:bg-sky-700
            ${isBouncing ? 'animate-bounce' : ''}
          `}
          aria-label="Abrir asistente de búsqueda"
        >
          <Search className="h-6 w-6" />
        </button>
      </div>
      
      {/* Floating Action Button - Menú de creación */}
      <div className="fixed bottom-6 left-6 z-50">
        <button
          onClick={() => setShowFloatingActionMenu(!showFloatingActionMenu)}
          className={`p-4 rounded-full text-white shadow-lg bg-green-600 hover:bg-green-700 transition-transform duration-300 transform ${showFloatingActionMenu ? 'rotate-45' : ''}`}
        >
          <Plus className="h-6 w-6" />
        </button>
        {showFloatingActionMenu && (
          <div className="absolute bottom-16 left-0 flex flex-col gap-2">
            <button onClick={() => setShowProjectModal(true)} className="p-3 rounded-full text-white shadow-md bg-green-500 hover:bg-green-600 transition-colors">
              <span className="sr-only">Crear Proyecto</span>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect></svg>
            </button>
            <button onClick={() => setIsModalOpen(true)} className="p-3 rounded-full text-white shadow-md bg-green-500 hover:bg-green-600 transition-colors">
              <span className="sr-only">Crear Tarea</span>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="12" y1="17" x2="12" y2="11"></line><line x1="9" y1="14" x2="15" y2="14"></line></svg>
            </button>
          </div>
        )}
      </div>

      {/* Task Creation Modal */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-slate-900 bg-opacity-50 flex items-center justify-center p-4 z-[100] backdrop-blur-sm">
          <div className="bg-white dark:bg-slate-800 rounded-lg p-6 w-full max-w-lg shadow-2xl scale-100 animate-fade-in">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-slate-800 dark:text-slate-100">Crear Nueva Tarea</h3>
              <button onClick={closeModal} className="text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200">
                <X className="h-6 w-6" />
              </button>
            </div>
            <form onSubmit={handlePreCreateTask}>
              <div className="mb-4">
                <label htmlFor="taskTitle" className="block text-sm font-medium text-slate-700 dark:text-slate-300">Título</label>
                <input
                  id="taskTitle"
                  type="text"
                  value={newTask.title}
                  onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
                  className="mt-1 block w-full rounded-md border-slate-300 dark:border-slate-600 shadow-sm p-2 bg-slate-50 dark:bg-slate-700 text-slate-800 dark:text-slate-100"
                  required
                />
              </div>
              <div className="mb-4">
                <label htmlFor="taskDescription" className="block text-sm font-medium text-slate-700 dark:text-slate-300">Descripción</label>
                <textarea
                  id="taskDescription"
                  value={newTask.description}
                  onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
                  rows="3"
                  className="mt-1 block w-full rounded-md border-slate-300 dark:border-slate-600 shadow-sm p-2 bg-slate-50 dark:bg-slate-700 text-slate-800 dark:text-slate-100"
                ></textarea>
              </div>
              <div className="mb-4">
                <h4 className="text-md font-medium text-slate-700 dark:text-slate-300 mb-2">Información Adicional</h4>
                <div className="grid grid-cols-2 gap-4">
                  {Object.keys(newTask.infoAdicional).map(key => (
                    <div key={key}>
                      <label htmlFor={key} className="block text-xs font-medium text-slate-500 dark:text-slate-400">{key.charAt(0).toUpperCase() + key.slice(1)}</label>
                      <input
                        id={key}
                        type={key === 'monto' ? 'text' : 'text'}
                        value={newTask.infoAdicional[key]}
                        onChange={key === 'monto' ? handleMontoChange : (e) => setNewTask({ ...newTask, infoAdicional: { ...newTask.infoAdicional, [key]: e.target.value } })}
                        className="mt-1 block w-full rounded-md border-slate-300 dark:border-slate-600 shadow-sm p-2 text-sm bg-slate-50 dark:bg-slate-700 text-slate-800 dark:text-slate-100"
                      />
                    </div>
                  ))}
                </div>
              </div>
              <div className="mb-4">
                <label htmlFor="dueDate" className="block text-sm font-medium text-slate-700 dark:text-slate-300">Fecha de entrega</label>
                <div className="flex gap-2 mt-2 flex-wrap">
                  {dateOptions.map(option => (
                    <button
                      key={option.value}
                      type="button"
                      onClick={() => handleDateChange(option.value)}
                      className="px-3 py-1 text-sm rounded-full bg-slate-200 dark:bg-slate-700 text-slate-800 dark:text-slate-200 hover:bg-slate-300 dark:hover:bg-slate-600 transition-colors"
                    >
                      {option.label}
                    </button>
                  ))}
                </div>
                <input
                  id="dueDate"
                  type="date"
                  value={newTask.dueDate}
                  onChange={handleCustomDateChange}
                  className="mt-2 block w-full rounded-md border-slate-300 dark:border-slate-600 shadow-sm p-2 bg-slate-50 dark:bg-slate-700 text-slate-800 dark:text-slate-100"
                />
              </div>
              <div className="mt-6 flex justify-end gap-2">
                <button type="button" onClick={closeModal} className="px-4 py-2 rounded-md font-semibold text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors">Cancelar</button>
                <button type="submit" className="px-4 py-2 rounded-md font-semibold text-white bg-green-600 hover:bg-green-700 transition-colors">Crear Tarea</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Project Creation Modal */}
      {showProjectModal && (
        <div className="fixed inset-0 bg-slate-900 bg-opacity-50 flex items-center justify-center p-4 z-[100] backdrop-blur-sm">
          <div className="bg-white dark:bg-slate-800 rounded-lg p-6 w-full max-w-sm shadow-2xl scale-100 animate-fade-in">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-slate-800 dark:text-slate-100">Crear Nuevo Proyecto</h3>
              <button onClick={closeModal} className="text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200">
                <X className="h-6 w-6" />
              </button>
            </div>
            <input
              type="text"
              className="w-full p-2 border border-slate-300 dark:border-slate-600 rounded-md bg-slate-50 dark:bg-slate-700 text-slate-800 dark:text-slate-100"
              placeholder="Nombre del proyecto"
              value={newProjectName}
              onChange={(e) => setNewProjectName(e.target.value)}
            />
            <div className="mt-4 flex justify-end gap-2">
              <button onClick={closeModal} className="px-4 py-2 rounded-md font-semibold text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700">Cancelar</button>
              <button onClick={handleCreateProject} className="px-4 py-2 rounded-md font-semibold text-white bg-green-600 hover:bg-green-700">Crear</button>
            </div>
          </div>
        </div>
      )}

      {/* Task Detail Modal */}
      {isTaskDetailModalOpen && selectedTask && (
        <div className="fixed inset-0 bg-slate-900 bg-opacity-50 flex items-center justify-center p-4 z-[100] backdrop-blur-sm">
          <div className="bg-white dark:bg-slate-800 rounded-lg p-6 w-full max-w-lg shadow-2xl scale-100 animate-fade-in">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-slate-800 dark:text-slate-100">{selectedTask.title}</h3>
              <button onClick={closeModal} className="text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200">
                <X className="h-6 w-6" />
              </button>
            </div>
            <div className="space-y-4 text-slate-700 dark:text-slate-300">
              <div>
                <h4 className="font-semibold">Descripción:</h4>
                <p>{selectedTask.description}</p>
              </div>
              <div>
                <h4 className="font-semibold">Proyecto:</h4>
                <p>{selectedTask.projectName}</p>
              </div>
              <div>
                <h4 className="font-semibold">Estado:</h4>
                <p>{statusMap[selectedTask.status]}</p>
              </div>
              <div>
                <h4 className="font-semibold">Fecha de Entrega:</h4>
                <p>{selectedTask.dueDate ? new Date(selectedTask.dueDate).toLocaleDateString() : 'N/A'}</p>
              </div>
            </div>
            <div className="mt-4">
              <h4 className="font-semibold text-slate-800 dark:text-slate-100 mb-2">Información Adicional:</h4>
              <ul className="list-disc list-inside space-y-1 text-slate-700 dark:text-slate-300">
                {Object.entries(selectedTask.infoAdicional).map(([key, value]) => (
                  <li key={key}>
                    <span className="font-medium">{key.charAt(0).toUpperCase() + key.slice(1)}:</span> {value}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}

      {/* Update Status Modal */}
      {isUpdateModalOpen && taskToUpdate && (
        <div className="fixed inset-0 bg-slate-900 bg-opacity-50 flex items-center justify-center p-4 z-[100] backdrop-blur-sm">
          <div className="bg-white dark:bg-slate-800 rounded-lg p-6 w-full max-w-sm shadow-2xl scale-100 animate-fade-in">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-slate-800 dark:text-slate-100">Actualizar Tarea</h3>
              <button onClick={closeModal} className="text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200">
                <X className="h-6 w-6" />
              </button>
            </div>
            <p className="text-slate-700 dark:text-slate-300 mb-4">Cambiar estado a: <span className="font-bold">{statusMap[taskToUpdate.newStatus]}</span></p>
            <textarea
              className="w-full p-2 border border-slate-300 dark:border-slate-600 rounded-md bg-slate-50 dark:bg-slate-700 text-slate-800 dark:text-slate-100"
              rows="3"
              placeholder="Añadir comentario..."
              value={taskUpdateData.comment}
              onChange={(e) => setTaskUpdateData({ ...taskUpdateData, comment: e.target.value })}
            />
            <div className="mt-4 flex justify-end gap-2">
              <button onClick={closeModal} className="px-4 py-2 rounded-md font-semibold text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700">Cancelar</button>
              <button onClick={handleConfirmUpdate} className="px-4 py-2 rounded-md font-semibold text-white bg-blue-600 hover:bg-blue-700">Confirmar</button>
            </div>
          </div>
        </div>
      )}

      {/* Task Confirmation Modal */}
      {isConfirmTaskModalOpen && taskToConfirm && (
        <div className="fixed inset-0 bg-slate-900 bg-opacity-50 flex items-center justify-center p-4 z-[100] backdrop-blur-sm">
          <div className="bg-white dark:bg-slate-800 rounded-lg p-6 w-full max-w-sm shadow-2xl scale-100 animate-fade-in">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-slate-800 dark:text-slate-100">Confirmar Tarea</h3>
              <button onClick={closeModal} className="text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200">
                <X className="h-6 w-6" />
              </button>
            </div>
            <p className="text-slate-700 dark:text-slate-300 mb-4">¿Estás seguro de que quieres crear la siguiente tarea?</p>
            <p className="font-semibold text-slate-800 dark:text-slate-100">{taskToConfirm.title}</p>
            <div className="mt-4 flex justify-end gap-2">
              <button onClick={closeModal} className="px-4 py-2 rounded-md font-semibold text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700">Cancelar</button>
              <button onClick={handleConfirmCreateTask} className="px-4 py-2 rounded-md font-semibold text-white bg-green-600 hover:bg-green-700">Confirmar</button>
            </div>
          </div>
        </div>
      )}
      
      {/* History Audit Modal */}
      {historyModalOpen && selectedHistoryItem && (
        <div className="fixed inset-0 bg-slate-900 bg-opacity-50 flex items-center justify-center p-4 z-[100] backdrop-blur-sm">
          <div className="bg-white dark:bg-slate-800 rounded-lg p-6 w-full max-w-lg shadow-2xl scale-100 animate-fade-in">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-slate-800 dark:text-slate-100">Auditoría de Tarea</h3>
              <button onClick={closeModal} className="text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200">
                <X className="h-6 w-6" />
              </button>
            </div>
            <h4 className="text-lg font-semibold text-slate-800 dark:text-slate-100 mb-2">"{selectedHistoryItem.taskTitle}"</h4>
            <div className="space-y-4 max-h-96 overflow-y-auto pr-2">
              {selectedHistoryItem.fullHistory.length > 0 ? (
                selectedHistoryItem.fullHistory.map((entry, index) => (
                  <div key={index} className="p-4 bg-slate-50 dark:bg-slate-700 rounded-lg shadow-inner">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-xs font-medium text-white bg-slate-500 rounded-full px-2 py-1">{statusMap[entry.status]}</span>
                      <span className="text-xs text-slate-500 dark:text-slate-400">
                        {entry.timestamp instanceof Date ? entry.timestamp.toLocaleString() : new Date(entry.timestamp.seconds * 1000).toLocaleString()}
                      </span>
                    </div>
                    <p className="text-sm text-slate-700 dark:text-slate-300">{entry.change}</p>
                    {entry.comment && <p className="text-sm italic text-slate-500 dark:text-slate-400 mt-1">"{entry.comment}"</p>}
                  </div>
                ))
              ) : (
                <p className="text-slate-500 dark:text-slate-400">No hay historial para esta tarea.</p>
              )}
            </div>
          </div>
        </div>
      )}

      {/* User Info Modal */}
      {showUserInfoModal && (
        <div className="fixed inset-0 bg-slate-900 bg-opacity-50 flex items-center justify-center p-4 z-[100] backdrop-blur-sm">
          <div className="bg-white dark:bg-slate-800 rounded-lg p-6 w-full max-w-sm shadow-2xl scale-100 animate-fade-in">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-slate-800 dark:text-slate-100">Información de Usuario</h3>
              <button onClick={closeModal} className="text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200">
                <X className="h-6 w-6" />
              </button>
            </div>
            <div className="text-center mb-4">
              <p className="text-slate-700 dark:text-slate-300">ID de Usuario: <code className="break-all font-mono bg-slate-200 dark:bg-slate-700 rounded p-1">{userId}</code></p>
            </div>
            <div className="flex flex-col items-center gap-4">
              <div className="w-24 h-24 rounded-full bg-slate-200 dark:bg-slate-700 flex items-center justify-center text-5xl">
                {userAvatar}
              </div>
              <div className="flex flex-wrap gap-2 justify-center">
                {defaultEmojis.map(emoji => (
                  <button key={emoji} onClick={() => handleUpdateAvatar(emoji)} className="p-2 rounded-full text-2xl bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors">
                    {emoji}
                  </button>
                ))}
              </div>
              <input type="file" onChange={handleFileChange} className="mt-4 text-sm text-slate-500 dark:text-slate-400 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/>
            </div>
          </div>
        </div>
      )}

      {/* Asistente de Búsqueda Modal */}
      {isAssistantModalOpen && (
        <div className="fixed inset-0 bg-slate-900 bg-opacity-50 flex items-center justify-center p-4 z-[100] backdrop-blur-sm">
          <div className="bg-white dark:bg-slate-800 rounded-lg p-6 w-full max-w-xl shadow-2xl scale-100 animate-fade-in flex flex-col h-full max-h-[80vh]">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-slate-800 dark:text-slate-100 flex items-center">
                <Search className="h-6 w-6 mr-2 text-sky-600" /> Asistente de Búsqueda
              </h3>
              <button onClick={closeModal} className="text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200">
                <X className="h-6 w-6" />
              </button>
            </div>
            <div className="flex-grow overflow-y-auto border-t border-b border-slate-200 dark:border-slate-700 py-4 mb-4 space-y-4">
              {chatHistory.length === 0 && (
                <div className="text-center text-slate-500 dark:text-slate-400">
                  Escribe una pregunta sobre tus proyectos o tareas.
                </div>
              )}
              {chatHistory.map((msg, index) => (
                <div key={index} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <div className={`max-w-[80%] p-3 rounded-lg ${msg.role === 'user' ? 'bg-blue-500 text-white' : 'bg-slate-200 dark:bg-slate-700 text-slate-800 dark:text-slate-100'}`}>
                    <p className="whitespace-pre-wrap">{msg.text}</p>
                  </div>
                </div>
              ))}
              {isAssistantLoading && (
                <div className="flex justify-start">
                  <div className="p-3 rounded-lg bg-slate-200 dark:bg-slate-700 text-slate-800 dark:text-slate-100">
                    <p className="animate-pulse">Escribiendo...</p>
                  </div>
                </div>
              )}
              <div ref={responseRef}></div>
            </div>
            <form onSubmit={handleAssistantSearch} className="flex gap-2">
              <input
                type="text"
                value={assistantQuery}
                onChange={(e) => setAssistantQuery(e.target.value)}
                className="flex-grow p-3 rounded-md border border-slate-300 dark:border-slate-600 bg-slate-50 dark:bg-slate-700 text-slate-800 dark:text-slate-100 focus:outline-none focus:ring-2 focus:ring-sky-600"
                placeholder="Pregunta sobre tus tareas..."
                disabled={isAssistantLoading}
              />
              <button type="submit" disabled={isAssistantLoading} className="p-3 rounded-md text-white bg-sky-600 hover:bg-sky-700 disabled:bg-slate-400 transition-colors">
                <CornerDownLeft className="h-6 w-6" />
              </button>
            </form>
          </div>
        </div>
      )}

    </div>
  );
}

export default App;
